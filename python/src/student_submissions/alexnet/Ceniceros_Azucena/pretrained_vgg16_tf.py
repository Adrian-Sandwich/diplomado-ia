# -*- coding: utf-8 -*-
"""Pretrained_vgg16_TF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBH3YrxD04QZXBl7DwLynLZuWWGklXkr

# **Modelo VGG16 Preentrenado en TF**

Instalación de librerias/herramientas necesarias
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical

# Cargar datos CIFAR
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Normalizar los valores al rango de 0 a 1
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# One-hot encoding
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

"""Cargar modelo preentrenado"""

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

base_model.trainable = False

# Capas adaptadas para CIFAR
model = models.Sequential([
    base_model,  # modelo base
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(10, activation='softmax')
])

"""Compilación y entrenamiento del modelo"""

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
model.summary()

model.fit(x_train, y_train, epochs=10, batch_size=64, validation_data=(x_test, y_test))

"""Evaluacion del modelo"""

test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Accuracy: {test_acc:.4f}")