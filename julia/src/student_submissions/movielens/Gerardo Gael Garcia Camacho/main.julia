#Pkg.instantiate()
using CSV
using DataFrames
using Printf
using Dates
#import Pkg; Pkg.add("Printf")
# Función para obtener la primera columna de la matriz
function obtenerPrimeraColumna(matriz, i)
    primeraColumna = []
    for fila in matriz
        if !isempty(fila)
            append!(primeraColumna, fila[i])
            #push!(primeraColumna, fila[i]) # Agrega el primer elemento de cada fila
        end
    end
    return primeraColumna
end

# Función para contar elementos únicos en una lista
function elementosUnicosConConteo(lista)
    
    conteo = Dict(string(clave) => 0 for clave in lista)
    for elemento in lista
        conteo[string(elemento)] += 1
    end
    return conteo
end

# Función para encontrar ratings
function find_ratings!(conteo, reader, names, m, s, it, calif, suma)
    for p in 1:s
        rec = reader[p,:]
        if isempty(rec)
            continue
        end
        an = split(rec[3], "|")
        for a in an
            for (j, v) in enumerate(names)
                try 
                    if v == a
                        suma[j][it] += calif[string(rec[1])]
                        conteo[j][it] += 1 * m[string(rec[1])]
                    end
                catch e
                end
            end
        end
    end
end

# Función para calcular vector de película
function vector_peli!(m, i, calif)
    name_file =  join(["ratings", "_", i, ".csv"])
    r = CSV.File(name_file, skipto = 2)
    #println(obtenerPrimeraColumna(r, 2))
    m[i+1] = elementosUnicosConConteo(obtenerPrimeraColumna(r, 2))
    calif[i+1] = promedios(r)
end

function promedios(r)
    idpeli = []
    calificacion = []
    for fila in r
        append!(idpeli, fila[2])
        append!(calificacion, fila[3])
    end
    conteo = Dict(string(clave) => 0.0 for clave in idpeli)
    for (id,cali) in zip(idpeli,calificacion)
        conteo[string(id)] += Float64(cali)
    end
    return conteo
end

# Función principal para encontrar ratings
function find_ratings_main(name, n)
    start = now()

    kg = ["Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary",
          "Drama", "Fantasy", "Film-Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance",
          "Sci-Fi", "Thriller", "War", "Western", "(no genres listed)"]
    nk = length(kg)

    m = Vector{Dict{String, Int}}(undef, n)
    calif = Vector{Dict{String, Float64}}(undef, n)
    Threads.@threads for i in 1:n
        vector_peli!(m, i -1, calif)
    end

    name_fil =  join([name, ".csv"])
    data = CSV.read(name_fil, DataFrame, skipto = 2)
    data = data
    s = nrow(data)

    conteo = [zeros(Int, n) for _ in 1:nk]
    suma = [zeros(Float64, n) for _ in 1:nk]

    Threads.@threads for i in 1:n
        find_ratings!(conteo, data, kg, m[i], s, i, calif[i], suma)
    end
    #wait.(conteo)

    num_ratings = zeros(Int, nk)
    promedio = zeros(Float64, nk)
    for i in 1:nk
        for j in 1:n
            num_ratings[i] += conteo[i][j]
            promedio[i] += suma[i][j]

        end
    end
    println(@sprintf("%2s   %20s   %8s   %2s", "", "Genre", "# Ratings", "Mean Rate"))
    for i in 1:nk
        println(@sprintf("%2d   %20s   %8d   %2f", i, kg[i], num_ratings[i], promedio[i]/num_ratings[i]))
    end
    duration = now() - start
    println("Duration = ", duration)
    println("Mt_FindRatingsMaster is Done")
end

# Función para guardar los datos particionados en archivos
function guarda!(data, filename, start_idx::Int, end_idx::Int)
    try
        CSV.write(filename, data[start_idx:end_idx, :])
        println("Archivo $filename creado correctamente con filas desde $start_idx hasta $end_idx.")
    catch e
        println("Error al escribir en $filename: ", e)
    end
end

# Función para particionar el archivo
function filepartition(n, name)
    start = now()
    nameFile = join([name,".csv"])

    # Cargar el archivo original
    data = CSV.read(nameFile, DataFrame)
    println("Archivo correcto")
    #println(typeof(data))
    tamano = nrow(data)
    filas = Int(floor(tamano / n))  # Asegura que filas sea un entero

    outputFileName = [join([name, "_", i-1, ".csv"]) for i in 1:n]
    start_idx  =  [Int((i - 1) * filas + 1) for i in 1:n]# Convertir a entero explícitamente
    end_idx  = [i < n ? Int(i * filas) : tamano for i in 1:n]# Asegura que la última partición llegue al final del archivo

    Threads.@threads for i in 1:n
        println("Creando archivo: $(outputFileName[i]) con filas desde $(start_idx[i]) hasta $(end_idx[i])...")
        guarda!(data, outputFileName[i], start_idx[i], end_idx[i])
    end
    duration = now() - start
    println("Duración = ", duration)
end

filepartition(10, "ratings")
find_ratings_main("movies", 10)
#print(Threads.nthreads())
